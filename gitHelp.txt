usage: git [--version] [--help] [-C <path>] [-c <name>=<value>]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           <command> [<args>]

Это общие команды Git, используемые в различных ситуациях.:

начать рабочую область (см. также: git help tutorial)
   clone      Клонировать репозиторий в новый каталог
   init       Создайте пустой Git-репозиторий или переинициализируйте существующий.

работать над текущими изменениями (см. также: git help daily)
   add        Добавить содержимое файла в индекс
			  git add имя-файла - Перед тем, как зафиксировать изменения отдельных файлов, 				нужно добавить файлы в набор этих изменений
			  git add -A  - сохранить все изменения разом
			  
   mv         Переместить или переименовать файл, каталог или символическую ссылку
	      git mv [-v] [-f] [-n] [-k] <источник> <пункт назначения>
	      git mv [-v] [-f] [-n] [-k] <источник> ... <каталог назначения>
		-f
		--force
		Принудительное переименование или перемещение файла, даже если цель существует
		-k
		Пропустить перемещение или переименовать действия, которые могут привести к ошибке. 				Ошибка возникает, когда источник не существует и не контролируется Git, или когда он 				перезаписывает существующий файл, если он -f не указан.
		-n
		--пробный прогон dry-run
		Ничего не делать; только покажи что будет
		-v
		--подробный verbose
Сообщайте имена файлов по мере их перемещения.
   reset      Сброс текущего HEAD в указанное состояние
   rm         Удалить файлы из рабочего дерева и из индекса

изучить историю и состояние (см. также: git help revisions)
   bisect     Используйте бинарный поиск, чтобы найти коммит с ошибкой
   grep       Печать строк, соответствующих шаблону
   log        Показать логи коммитов
   show       Показать различные типы объектов
   status     Показать статус рабочего дерева

расти, отмечать и изменять свою общую историю
   branch     Список, создание или удаление веток. Показывает список веток, с которыми мы работаем в 		проекте, и выделяет текущую. 
   checkout   Переключать ветки или восстанавливать рабочие файлы дерева. 
			  git checkout -b имя-новой-ветки. создаём новую ветку
			  git branch -m старое-имя-ветки новое-имя-ветки - изменить название ветки
   commit     Record changes to the repository
			  git commit -m "ваше сообщение" - зафиксировать все сохранённые изменения и                           дать им название.
   diff       Показать изменения между коммитами, коммитом и рабочим деревом и т. д.
   merge      Соедините две или более истории развития вместе
   rebase     Повторно применить коммиты поверх другого базового наконечника
   tag       Создать, перечислить, удалить или проверить объект тега, подписанный GPG

сотрудничать (см. также: рабочие процессы git help)
   fetch      Скачать объекты и ссылки из другого хранилища
   pull       Выбрать и интегрировать с другим хранилищем или локальной веткой
			  git pull academy master. Academy здесь — сокращённое название мастер-репозитория, такое имя используется в проектах студентов Академии, вы можете выбрать любое другое название.
			  забираем (подтягиваем) изменения из ветки
   push       Обновление удаленных ссылок вместе со связанными объектами
			  git push origin название-текущей-ветки, где origin означает репозиторий, который был склонирован на компьютер, то есть ваш форк
			  отправить свои изменения (коммиты) в репозиторий на GitHub
'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.
